package internals;
import java.util.*;
public class Dijkstra {
	static final int INF=Integer.MAX_VALUE;

int minDistance(int []dist,boolean [] visited,int n) {
int min=INF,minIndex=-1;
for(int i=0;i<n;i++) {
if(!visited[i]&&dist[i]<min) {
	min=dist[i];
	minIndex=i;
}
}
return minIndex;
}
void dijk(int n, int src, int[][]graph) {
	int []dist=new int[n];
	boolean []visited=new boolean[n];
	int []predecesors= new int[n];
	for(int i=0;i<n;i++) {
		dist[i]=INF;
		visited[i]=false;
		predecesors[i]=-1;
	}
	dist[src]=0;
	for(int count=0;count<n-1;count++) {
		int u = minDistance(dist,visited,n);
		visited[u]=true;
		for(int v=0;v<n;v++) {
			if(!visited[v] && graph[u][v]!=0 && dist[u]!=INF && (dist[u]+graph[u][v])<dist[v]) {
				dist[v]=dist[u]+graph[u][v];
				predecesors[v]=u;
			}
		}
	}
	System.out.println("Vetex \t Distance \t Path");
	for(int i=0;i<n;i++) {
		if(i!=src) {
System.out.print("("+src+"->"+i+")"+"\t"+dist[i]+"\t\t");
printPath(i,predecesors);
System.out.println();
	}
}
} 
void printPath(int currentVertex,int[] predecesors) {
	if(currentVertex==-1) {
		return;
	}
	printPath(predecesors[currentVertex],predecesors);
	System.out.print(currentVertex+" ");
}
public static void main(String[]args) {
	Scanner sc = new Scanner(System.in);
	System.out.println("Enter the number of Vertices");
	int n= sc.nextInt();
	int [][]graph =new int[n][n];
	System.out.println("Enter the weighted adjacencymatrix: ");
	for(int i=0;i<n;i++) {
		for(int j=0;j<n;j++) {
graph[i][j]=sc.nextInt();
	}
	}
		System.out.println("Enter the source vertex");
		int src=sc.nextInt();
		Dijkstra d= new Dijkstra();
		d.dijk(n, src, graph);
		sc.close();
		

}
}
Ip
vertices 3
0 2 9
2 0 3
9 3 0
Op
Vertex   Distance   Path
0 -> 1    2         0 -> 1 
0 -> 2    5         0 -> 1 -> 2 
