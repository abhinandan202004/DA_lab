package internals;
import java.util.*;
public class FloydWarshall {
static final int INF=Integer.MAX_VALUE;
int [][]floydwarshall(int [][]a){
	int n=a.length;
	int [][]d=createdistmatrix(a,n);
	for(int k=0;k<n;k++) {
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(d[i][k]<INF&&d[k][j]<INF) {
					d[i][j]=Math.min(d[i][j],d[i][k]+d[k][j] );
				}
			}
		}
	}
	return d;
}
int [][]createdistmatrix(int[][]a,int n){
	int [][]d= new int[n][n];
	for(int i=0;i<n;i++) {
		for(int j=0;j<n;j++) {
			if(i==j) {
				d[i][j]=0;
			}else if(a[i][j]==0) {
				d[i][j]=INF;
			}else {
				d[i][j]=a[i][j];
			}
		}
	}

	return d;
}
	public static void main(String[]args) {
		int [][]a= { {0, 3, INF},
			    {INF, 0, 1},
			    {INF, INF, 0}
};
		FloydWarshall fw = new FloydWarshall();
		int [][]sp=fw.floydwarshall(a);
		for(int i=0;i<sp.length;i++) {
			for(int j=0;j<sp.length;j++) {
				if(sp[i][j]==INF) {
					System.out.print("INF"+" ");
				}else {
					System.out.print(sp[i][j]+" ");
				}
			}
			System.out.println();
			
		}
		
			}
	}
		


op
0 3 4 
INF 0 1 
INF INF 0 
