package internals;
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
public class MergeSort {
public static void mgsort(int [] arr, int left, int right) {
	if (left<right) {
		int mid = left + (right-left)/2;
		mgsort(arr,left, mid);
		mgsort(arr,mid+1,right);
		merge(arr,left,mid,right);
	}
}
public static void merge(int [] arr, int left, int mid, int right) {
int n1=mid-left+1;
int n2=right-mid;
int [] leftarray= new int [n1];
int [] rightarray=new int [n2];
for(int i=0;i<n1;i++) {
	leftarray[i]=arr[left+i];
}
for(int j=0;j<n2;j++) {
	rightarray[j]=arr[mid+1+j];
}
int i=0,j=0, k=left;
while(i<n1 && j<n2) {
	if(leftarray[i]<=rightarray[j])
	{
		arr[k++]=leftarray[i++];
	}else {
		arr[k++]=rightarray[j++];
	}
}
	while(i<n1) {
		arr[k++]=leftarray[i++];
	}
	while(j<n2) {
		arr[k++]=rightarray[j++];
	}

}
public static void main(String[]args) {
	Scanner sc = new Scanner(System.in);
	Random rand = new Random();
	System.out.println("Enter the sixe of the array");
	int size = sc.nextInt();
	int [] array= new int [size];
	for(int i=0;i<size;i++) {
		array[i]=rand.nextInt(100);
	}
	System.out.println("Array before Sorting"+Arrays.toString(array));
	long start= System.nanoTime();
	mgsort(array,0,size-1);
	long end=System.nanoTime();
	System.out.println("Array after sorting"+Arrays.toString(array));
	long duration=end-start;
	System.out.println("Duration:"+duration);
	sc.close();
}
}
